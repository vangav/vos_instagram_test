
# "First, solve the problem. Then, write the code. -John Johnson"
# "Or use Vangav M"
# www.vangav.com

# MIT License
#
# Copyright (c) 2016 Vangav
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

# Community
# Facebook Group: Vangav Open Source - Backend
#   fb.com/groups/575834775932682/
# Facebook Page: Vangav
#   fb.com/vangav.f
# 
# Third party communities for Vangav Backend
#   - play framework
#   - cassandra
#   - datastax
#   
# Tag your question online (e.g.: stack overflow, etc ...) with
#   #vangav_backend
#   to easier find questions/answers online
 
# @author mustapha
# fb.com/mustapha.abdallah

# Thread pool properties
# These numbers control the backend's performance on scale
#   basically keeping the backend stable and performant even with high
#   demand spikes

# All properties are commented-out since default values are optimal for most
#   cases and are calculated dynamically based on the machine's number of cores
# And values are left empty - all types are integers

# Used for new threads for in-memory operations
# Default: min ((number of processor cores + 1) * 10, 1000)
#runnable_pool_size=

# Used for cassandra's blocking operations
# Default: number of processor cores + 1
#cassandra_pool_size=

# Used by the dispatcher
# Default: number of processor cores + 1
#dispatcher_pool_size=

# Used by the REST client
# Default: number of processor cores + 1
#rest_client_pool_size=